name: Django CI/CD Pipeline

on: [ push, pull_request ]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8
        run: flake8 .

  test:
    needs: lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.DJANGO_POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DJANGO_POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DJANGO_POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install psycopg2-binary

      - name: Debug secrets availability
        run: |
          echo "Проверка секретов:"
          echo "DJANGO_POSTGRES_USER: ${{ secrets.DJANGO_POSTGRES_USER != '' && '****' || 'NOT SET' }}"
          echo "DJANGO_POSTGRES_DB: ${{ secrets.DJANGO_POSTGRES_DB != '' && '****' || 'NOT SET' }}"
          echo "Длина DB_PASSWORD: ${#DJANGO_POSTGRES_PASSWORD}"
    

      - name: Wait for PostgreSQL
        run: sleep 15

      - name: Check PostgreSQL connection
        run: |
          pg_isready -h localhost -p 5432

      - name: Run migrations
        run: python manage.py migrate
        env:
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DATABASE_URL: postgres://${{ secrets.DJANGO_POSTGRES_USER }}:${{ secrets.DJANGO_POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.DJANGO_POSTGRES_DB }}
          ENGINE: django.db.backends.postgresql_psycopg2
          POSTGRES_DB: ${{ secrets.DJANGO_POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.DJANGO_POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DJANGO_POSTGRES_PASSWORD }}
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432

      - name: Run tests
        run: python manage.py test
        env:
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}


  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Debug Docker Hub creds
        run: |
          echo "Username length: ${#DOCKER_HUB_USERNAME}"
          echo "Token length: ${#DOCKER_HUB_ACCESS_TOKEN}"
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 80:8000 ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
          EOF
